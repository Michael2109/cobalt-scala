group 'group_id'
version '1.0-SNAPSHOT'

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {

    // Java Formatter
    compile group: 'com.google.googlejavaformat', name: 'google-java-format', version: '1.3'

    // junit
    compile group: 'junit', name: 'junit', version: '4.12'

    // scalatest
    compile group: 'org.scalatest', name: 'scalatest_2.12', version: '3.0.1'

    // Scalastyle
    compile group: 'org.scalastyle', name: 'scalastyle-maven-plugin', version: '0.8.0'

    // janino simple cobalt
    compile group: 'org.codehaus.janino', name: 'janino', version: '3.0.6'

    // asm - Java
    compile group: 'org.ow2.asm', name: 'asm', version: '5.2'

    // asm - Scala
    compile group: 'org.scala-lang.modules', name: 'scala-asm', version: '5.1.0-scala-2'

    // Scala logging slf4j
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.24'

    // Scala library
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.12.1'

    // Scala cobalt
    compile group: 'org.scala-lang', name: 'scala-compiler', version: '2.12.1'

    // https://mvnrepository.com/artifact/com.lihaoyi/fastparse
    compile group: 'com.lihaoyi', name: 'fastparse_2.12', version: '1.0.0'

    // https://mvnrepository.com/artifact/org.parboiled/parboiled
    compile group: 'org.parboiled', name: 'parboiled_2.11', version: '2.0.0'

    // https://mvnrepository.com/artifact/com.github.nikita-volkov/sext
    compile group: 'com.github.nikita-volkov', name: 'sext', version: '0.2.2'
}

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala', 'src/main/java']
        }
        java {
            srcDirs = []
        }
        resources {
            srcDir "resources"
        }
    }

    test {
        scala {

            include "cobalt"
        }
        resources {
            srcDir 'resources'
        }


    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = reporting.file("../../vendors/docs")
}

scaladoc {
    source = sourceSets.main.allScala
    classpath = configurations.compile
    destinationDir = reporting.file("../../vendors/docs")
}
